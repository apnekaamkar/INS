"""Python code for generating and verifying an RSA+SHA256 signature."""
from Crypto.Signature import PKCS1_v1_5
from Crypto.Hash import SHA256
from Crypto.PublicKey import RSA
from Crypto import Random
import base64


def generate_signature(private_key, message):
	# Load the private key
	key = RSA.import_key(private_key)
	# Generate SHA-256 hash of the message
	hashed_message = SHA256.new(message.encode('utf-8'))
	# Create a signature using the private key
	signer = PKCS1_v1_5.new(key)
	signature = signer.sign(hashed_message)
	return signature


def verify_signature(public_key, message, signature):
	# Load the public key
	key = RSA.import_key(public_key)
	# Generate SHA-256 hash of the message
	hashed_message = SHA256.new(message.encode('utf-8'))
	# Verify the signature using the public key
	verifier = PKCS1_v1_5.new(key)
	return verifier.verify(hashed_message, signature)


# Generate RSA key pair
random_generator = Random.new().read
key_pair = RSA.generate(2048, randfunc=random_generator)

# Extract public and private keys
public_key = key_pair.publickey().export_key()
private_key = key_pair.export_key()


if __name__ == '__main__':
	# Example usage
	message = "Hello, World!"

	# Generate a digital signature
	signature = generate_signature(private_key, message)
	sig_b64 = base64.b64encode(signature).decode('ascii')
	print("Generated Signature (base64):", sig_b64)

	# Verify the digital signature
	is_valid = verify_signature(public_key, message, signature)
	print("Signature Verification Result:", is_valid)
